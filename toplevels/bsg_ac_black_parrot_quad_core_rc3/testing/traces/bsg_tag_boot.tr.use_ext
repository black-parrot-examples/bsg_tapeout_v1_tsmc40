# PRO-TIP: Set editior syntax to bash (or sh)

################################################################################
# DESIGN SPECIFIC TAG INFO
#
# Number | Description            | Width
# -------+------------------------+-------
#     0  | Clkgen Async Reset     | 1-bit
#   3-1  | Clkgen Oscillator      | 5-bits
#   6-4  | Clkgen Osc Trigger     | 1-bit
#   9-7  | Clkgen Downsampoler    | 7-bits
# 12-10  | Clkgen Clock Select    | 2-bits
#    13  | Prev Link IO Control   | 3-bits
#    14  | Prev Link CORE Control | 2-bits
#    15  | Prev CT CORE Control   | 2-bits
#    16  | Next Link IO Control   | 3-bits
#    17  | Next Link CORE Control | 2-bits
#    18  | Next CT CORE Control   | 2-bits
#    19  | Core Control           | 4-bits
#    20  | Host Control           | 4-bits
#    21  | Router Control         | 4-bits
#    22  | DMC Control            | 2-bits
#    23  | DMC trefi 0            | 8-bits
#    24  | DMC trefi 1            | 8-bits
#    25  | DMC tmrd trfc          | 8-bits
#    26  | DMC trc trp            | 8-bits
#    27  | DMC tras trrd          | 8-bits
#    28  | DMC trcd twr           | 8-bits
#    29  | DMC twtr trtp          | 8-bits
#    30  | DMC tcas               | 4-bits
#    31  | DMC col \ row width    | 8-bits
#    32  | DMC bank width         |
#        |     dqs_sel_cal        | 8-bits
#        |     init_cmd_cnt       |
#
#
# Number of masters = 2
# Number of clients = 32
# Max data width = 9
#
# Packet lengths
# <4b>___<2b>___<6b>_1b_<4b>___<9b>
# <4b>___<22b>
#
# There are 2 masters (ASIC and GW) but they are replicated systems. The lsb of
# the masterEn is the ASIC and the msb is the GW. The GW will be given WHID 0,0
# and the ASIC will be given WHID 1,0. Therefore, we want to keep the prev link
# of the GW in reset and the next link of the ASIC in reset.
#

################################################################################
# Tag Trace Replay Packet Format
#
# M = number of masters
# N = max(1, clog2(#_of_tag_clients))
# D = max(client_1_width, client_2_width, ..., client_n_width)
# L = clog2(D+1)
#
# |<    4-bits    >|< M-bits >|< N-bits >|<     1-bit    >|< L-bits >|< D-bits >|
# +----------------+----------+----------+----------------+----------+----------+
# | replay command | masterEn |  nodeID  | data_not_reset |  length  |   data   |
# +----------------+----------+----------+----------------+----------+----------+
#
# Replay Commands
#   0 = 0000 = Wait a cycle
#   1 = 0001 = Send data
#   2 = 0010 = Receive data
#   3 = 0011 = Assert done_o ouput signal
#   4 = 0100 = End test (calls $finish)
#   5 = 0101 = Wait for cycle_counter == 0
#   6 = 0110 = Initialize cycle_counter with a 16 bit number

################################################################################
#
# RESET BSG TAG MASTER
#
# First, we must reset the bsg_tag_master. To do this, we send a 1, then we
# send a bunch of 0's! By a bunch, the exact amount is (2^clog2(N+1+L+D))+1

# Send a full 0 packet to all masters
0001___11___000000_0_0000___000000000

# Wait ~32 cycles
0110___0000000000000000100000
0101___0000000000000000000000

################################################################################
#  ___  ___   ___ _____ ___ _____ ___    _   ___    ___ _    _  _____ ___ _  _
# | _ )/ _ \ / _ \_   _/ __|_   _| _ \  /_\ | _ \  / __| |  | |/ / __| __| \| |
# | _ \ (_) | (_) || | \__ \ | | |   / / _ \|  _/ | (__| |__| ' < (_ | _|| .` |
# |___/\___/ \___/ |_| |___/ |_| |_|_\/_/ \_\_|    \___|____|_|\_\___|___|_|\_|
#
################################################################################

################################################################################
#
# RESET BSG TAG CLIENTS
#
# Next, we should reset each client node. To do this we send a packet
# that has all 1's for data, and has data_not_reset=0. The nodeID should
# be the ID of the client we are reseting, and length should be the
# corrent length of the packet. We should send this packet to each client.

#SEND  en   id=0   r l=1
0001___01___000000_0_0001___000000001
#SEND  en   id=1   r l=5
0001___01___000001_0_0101___000011111
#SEND  en   id=2   r l=5
0001___01___000010_0_0101___000011111
#SEND  en   id=3   r l=5
0001___01___000011_0_0101___000011111
#SEND  en   id=4   r l=1
0001___01___000100_0_0001___000000001
#SEND  en   id=5   r l=1
0001___01___000101_0_0001___000000001
#SEND  en   id=6   r l=1
0001___01___000110_0_0001___000000001
#SEND  en   id=7   r l=7
0001___01___000111_0_0111___001111111
#SEND  en   id=8   r l=7
0001___01___001000_0_0111___001111111
#SEND  en   id=9   r l=7
0001___01___001001_0_0111___001111111
#SEND  en   id=10  r l=2
0001___01___001010_0_0010___000000011
#SEND  en   id=11  r l=2
0001___01___001011_0_0010___000000011
#SEND  en   id=12  r l=2
0001___01___001100_0_0010___000000011

#SEND  en   id=22  r l=5
0001___01___010110_0_0101___000011111
#SEND  en   id=23  r l=1
0001___01___010111_0_0001___000000001
#SEND  en   id=24  r l=7
0001___01___011000_0_0111___001111111
#SEND  en   id=25  r l=2
0001___01___011001_0_0010___000000011


#SEND  en   id=26  r l=1
0001___01___011010_0_0001___000000001
#SEND  en   id=27  r l=5
0001___01___011011_0_0101___000011111
#SEND  en   id=28  r l=5
0001___01___011100_0_0101___000011111
#SEND  en   id=29  r l=5
0001___01___011101_0_0101___000011111
#SEND  en   id=30  r l=5
0001___01___011110_0_0101___000011111
#SEND  en   id=31  r l=1
0001___01___011111_0_0001___000000001
#SEND  en   id=32  r l=1
0001___01___100000_0_0001___000000001
#SEND  en   id=33  r l=1
0001___01___100001_0_0001___000000001
#SEND  en   id=34  r l=1
0001___01___100010_0_0001___000000001
#SEND  en   id=35  r l=3
0001___01___100011_0_0011___000000111

################################################################################
#
# START CONFIGURATION
#
# The bsg tag network is now live! We can begin our configuration.

#   ### Set osc triggers low
#   
#   #SEND  en   id=4   d l=1    {trigger}
#   0001___01___000100_1_0001___000000000
#   #SEND  en   id=5   d l=1    {trigger}
#   0001___01___000101_1_0001___000000000
#   #SEND  en   id=6   d l=1    {trigger}
#   0001___01___000110_1_0001___000000000
#   #SEND  en   id=35  d l=1    {trigger}
#   0001___01___100011_1_0001___000000000
#   
#   ### Program the raw oscillators speed
#   
#   #SEND  en   id=1   d l=5    {adt, cdt, fdt}
#   0001___01___000001_1_0101___000000000
#   #SEND  en   id=2   d l=5    {adt, cdt, fdt}
#   0001___01___000010_1_0101___000000000
#   #SEND  en   id=3   d l=5    {adt, cdt, fdt}
#   0001___01___000011_1_0101___000000000
#   #SEND  en   id=34  d l=5    {adt, cdt, fdt}
#   0001___01___100010_1_0101___000000000
#   
#   ### Trigger oscillators
#   
#   #SEND  en   id=4   d l=1    {trigger}
#   0001___01___000100_1_0001___000000001
#   0001___01___000100_1_0001___000000000
#   #SEND  en   id=5   d l=1    {trigger}
#   0001___01___000101_1_0001___000000001
#   0001___01___000101_1_0001___000000000
#   #SEND  en   id=6   d l=1    {trigger}
#   0001___01___000110_1_0001___000000001
#   0001___01___000110_1_0001___000000000
#   #SEND  en   id=35  d l=1    {trigger}
#   0001___01___100011_1_0001___000000001
#   0001___01___100011_1_0001___000000000
#   
#   ### Async clk-gen reset to get things moving
#   
#   #SEND  en   id=0   d l=1    {async_reset}
#   0001___01___000000_1_0001___000000000
#   0001___01___000000_1_0001___000000001
#   0001___01___000000_1_0001___000000000
#   
#   ### Set downsamples and reset
#   
#   #SEND  en   id=7   d l=7    {ds_val, reset}
#   0001___01___000111_1_0111___000000001
#   0001___01___000111_1_0111___000000000
#   #SEND  en   id=8   d l=7    {ds_val, reset}
#   0001___01___001000_1_0111___000000001
#   0001___01___001000_1_0111___000000000
#   #SEND  en   id=9   d l=7    {ds_val, reset}
#   0001___01___001001_1_0111___000000001
#   0001___01___001001_1_0111___000000000
#   
#   ### Select the output clock (0=raw osc, 1=ds osc, 2=ext, 3=off)
#   
#   #SEND  en   id=10  d l=2    {clk_select}
#   0001___01___001010_1_0010___000000001
#   #SEND  en   id=11  d l=2    {clk_select}
#   0001___01___001011_1_0010___000000001
#   #SEND  en   id=12  d l=2    {clk_select}
#   0001___01___001100_1_0010___000000001

### Select the output clock (0=raw osc, 1=ds osc, 2=ext, 3=off)

#SEND  en   id=10  d l=2    {clk_select}
0001___01___001010_1_0010___000000010
#SEND  en   id=11  d l=2    {clk_select}
0001___01___001011_1_0010___000000010
#SEND  en   id=12  d l=2    {clk_select}
0001___01___001100_1_0010___000000010
#SEND  en   id=25  d l=2    {clk_select}
0001___01___011001_1_0010___000000010

### Set delay line triggers low

#SEND  en   id=31  d l=1    {trigger}
0001___01___011111_1_0001___000000000
#SEND  en   id=32  d l=1    {trigger}
0001___01___100000_1_0001___000000000
#SEND  en   id=33  d l=1    {trigger}
0001___01___100001_1_0001___000000000
#SEND  en   id=34  d l=1    {trigger}
0001___01___100010_1_0001___000000000

### Program the delay lines phase shift

#SEND  en   id=27  d l=5    {adt, cdt, fdt}
0001___01___011011_1_0101___000000000
#SEND  en   id=28  d l=5    {adt, cdt, fdt}
0001___01___011100_1_0101___000000000
#SEND  en   id=29  d l=5    {adt, cdt, fdt}
0001___01___011101_1_0101___000000000
#SEND  en   id=30  d l=5    {adt, cdt, fdt}
0001___01___011110_1_0101___000000000

### Trigger delay lines

#SEND  en   id=31  d l=1    {trigger}
0001___01___011111_1_0001___000000001
0001___01___011111_1_0001___000000000
#SEND  en   id=32  d l=1    {trigger}
0001___01___100000_1_0001___000000001
0001___01___100000_1_0001___000000000
#SEND  en   id=33  d l=1    {trigger}
0001___01___100001_1_0001___000000001
0001___01___100001_1_0001___000000000
#SEND  en   id=34  d l=1    {trigger}
0001___01___100010_1_0001___000000001
0001___01___100010_1_0001___000000000

### Async clk-gen reset to get things moving

#SEND  en   id=26  d l=1    {async_reset}
0001___01___011010_1_0001___000000000
0001___01___011010_1_0001___000000001
0001___01___011010_1_0001___000000000

### Set downsamples and reset
#
#SEND  en   id=35  d l=2    {ds_val, reset}
0001___01___100011_1_0011___000000001
0001___01___100011_1_0011___000000000

################################################################################
#  ___  ___   ___ _____ ___ _____ ___    _   ___   ___ ___     ___ ___  __  __ ___ _    _____  __
# | _ )/ _ \ / _ \_   _/ __|_   _| _ \  /_\ | _ \ |_ _/ _ \   / __/ _ \|  \/  | _ \ |  | __\ \/ /
# | _ \ (_) | (_) || | \__ \ | | |   / / _ \|  _/  | | (_) | | (_| (_) | |\/| |  _/ |__| _| >  <
# |___/\___/ \___/ |_| |___/ |_| |_|_\/_/ \_\_|   |___\___/   \___\___/|_|  |_|_| |____|___/_/\_\
#
################################################################################

################################################################################
#
# RESET BSG TAG CLIENTS
#
# Next, we should reset each client node. To do this we send a packet
# that has all 1's for data, and has data_not_reset=0. The nodeID should
# be the ID of the client we are reseting, and length should be the
# corrent length of the packet. We should send this packet to each client.

#SEND  en   id=13  r l=3
0001___11___001101_0_0011___000000111
#SEND  en   id=14  r l=2
0001___11___001110_0_0010___000000011
#SEND  en   id=15  r l=2
0001___11___001111_0_0010___000000011
#SEND  en   id=16  r l=3
0001___11___010000_0_0011___000000111
#SEND  en   id=17  r l=2
0001___11___010001_0_0010___000000011
#SEND  en   id=18  r l=2
0001___11___010010_0_0010___000000011
#SEND  en   id=19  r l=4
0001___11___010011_0_1001___000001111
#SEND  en   id=20  r l=4
0001___11___010100_0_1001___000001111
#SEND  en   id=21  r l=4
0001___11___010101_0_1001___000001111

#SEND  en   id=36  r l=8
0001___11___100100_0_1000___011111111
#SEND  en   id=37  r l=8
0001___11___100101_0_1000___011111111
#SEND  en   id=38  r l=8
0001___11___100110_0_1000___011111111
#SEND  en   id=39  r l=8
0001___11___100111_0_1000___011111111
#SEND  en   id=40  r l=8
0001___11___101000_0_1000___011111111
#SEND  en   id=41  r l=8
0001___11___101001_0_1000___011111111
#SEND  en   id=42  r l=8
0001___11___101010_0_1000___011111111
#SEND  en   id=43  r l=8
0001___11___101011_0_1000___011111111
#SEND  en   id=44  r l=8
0001___11___101100_0_1000___011111111
#SEND  en   id=45  r l=8
0001___11___101101_0_1000___011111111
#SEND  en   id=46  r l=8
0001___11___101110_0_1000___011111111
#SEND  en   id=47  r l=8
0001___11___101111_0_1000___011111111

################################################################################
#
# START CONFIGURATION
#
# The bsg tag network is now live! We can begin our configuration.

### STEP 1: INITIALIZE EVERYTHING

# Reset both ASIC and GW Prev Link IO Control
#SEND  en   id=13  d l=3   {up_link_reset, down_link_reset, async_token_reset}
0001___11___001101_1_0011___000000110

# Reset both ASIC and GW Prev Link CORE Control
#SEND  en   id=14  d l=2   {up_link_reset, down_link_reset}
0001___11___001110_1_0010___000000011

# Reset both ASIC and GW Prev CT CORE Control
#SEND  en   id=15  d l=2   {reset, fifo_reset}
0001___11___001111_1_0010___000000011

# Reset both ASIC and GW Next Link IO Control
#SEND  en   id=16  d l=3   {up_link_reset, down_link_reset, async_token_reset}
0001___11___010000_1_0011___000000110

# Reset both ASIC and GW Next Link CORE Control
#SEND  en   id=17  d l=2   {up_link_reset, down_link_reset}
0001___11___010001_1_0010___000000011

# Reset both ASIC and GW Next CT CORE Control
#SEND  en   id=18  d l=2   {reset, fifo_reset}
0001___11___010010_1_0010___000000011

# Reset ASIC configs and set dids
#SEND  en   id=19  d l=9   {reset, did=1}
0001___01___010011_1_1001___100000001
#SEND  en   id=20  d l=9   {reset, did=0}
0001___01___010100_1_1001___100000000
#SEND  en   id=21  d l=9   {reset, did=1}
0001___01___010101_1_1001___100000001

# Reset GW configs and set dids
#SEND  en   id=19  d l=9   {reset, did=1}
0001___10___010011_1_1001___100000001
#SEND  en   id=20  d l=9   {reset, did=0}
0001___10___010100_1_1001___100000000
#SEND  en   id=21  d l=9   {reset, did=0}
0001___10___010101_1_1001___100000000

# Reset DMC configs and set dmc_p
#SEND  en   id=36  d l=8    {trefi[7:0]}
0001___01___100100_1_1000___011111111
#SEND  en   id=37  d l=8    {trefi[15:8]}
0001___01___100101_1_1000___000000011
#SEND  en   id=38  d l=8    {trfc, tmrd}
0001___01___100110_1_1000___011110001
#SEND  en   id=39  d l=8    {trp, trc}
0001___01___100111_1_1000___000111010
#SEND  en   id=40  d l=8    {trrd, tras}
0001___01___101000_1_1000___000010111
#SEND  en   id=41  d l=8    {twr, trcd}
0001___01___101001_1_1000___010110010
#SEND  en   id=42  d l=8    {trtp, twtr}
0001___01___101010_1_1000___010000111
#SEND  en   id=43  d l=8    {cas}
0001___01___101011_1_1000___000000011
#SEND  en   id=44  d l=8    {row_width, col_width}
0001___01___101100_1_1000___011101011
#SEND  en   id=45  d l=8    {bank_pos, bank_width}
0001___01___101101_1_1000___001100110
#SEND  en   id=46  d l=8    {dmc_bypass, init_cmd_cnt, dqs_sel_cal}
0001___01___101110_1_1000___000010100
#SEND  en   id=47  d l=8    {reset}
#0001___01___101111_1_1000___000000000
0001___01___101111_1_1000___000000001
0001___01___101111_1_1000___000000000

### STEP 2: Perform async token resets

# Async token reset for ASIC Prev IO Link
#SEND  en   id=13  d l=3   {up_link_reset, down_link_reset, async_token_reset}
0001___01___001101_1_0011___000000111
0001___01___001101_1_0011___000000110

# Assert async token reset for GW Next IO Link
#SEND  en   id=16  d l=3   {up_link_reset, down_link_reset, async_token_reset}
0001___10___010000_1_0011___000000111
0001___10___010000_1_0011___000000110

### STEP 3: De-assert Upstream IO Links reset

# De-assert upstream reset for ASIC Prev IO Link
#SEND  en   id=13  d l=3   {up_link_reset, down_link_reset, async_token_reset}
0001___01___001101_1_0011___000000010

# De-assert upstream reset for GW Next IO Link
#SEND  en   id=16  d l=3   {up_link_reset, down_link_reset, async_token_reset}
0001___10___010000_1_0011___000000010

### STEP 4: De-assert Downstream IO Links reset

# De-assert downstream reset for ASIC Prev IO Link
#SEND  en   id=13  d l=3   {up_link_reset, down_link_reset, async_token_reset}
0001___01___001101_1_0011___000000000

# De-assert downstream reset for GW Next IO Link
#SEND  en   id=16  d l=3   {up_link_reset, down_link_reset, async_token_reset}
0001___10___010000_1_0011___000000000

### STEP 5/6: De-assert Upstream/Downstream CORE Links reset

# De-assert upstream/downstream reset for ASIC Prev CORE Link
#SEND  en   id=14  d l=2   {up_link_reset, down_link_reset}
0001___01___001110_1_0010___000000000

# De-assert upstream/downstream reset for GW Next CORE Link
#SEND  en   id=17  d l=2   {up_link_reset, down_link_reset}
0001___10___010001_1_0010___000000000

### STEP 7: De-assert CT reset and fifo reset

# De-assert reset and fifo_reset for ASIC Prev CT CORE Control
#SEND  en   id=15  d l=2   {reset, fifo_reset}
0001___01___001111_1_0010___000000000

# De-assert reset and fifo_reset for GW Next CT CORE Control
#SEND  en   id=18  d l=2   {reset, fifo_reset}
0001___10___010010_1_0010___000000000

### STEP 8: De-assert Router reset

# Deassert reset ASIC Routers and set did
#SEND  en   id=19  d l=9   {reset, did=1}
0001___01___010011_1_1001___000000001
#SEND  en   id=20  d l=9   {reset, did=0}
0001___01___010100_1_1001___000000000
#SEND  en   id=21  d l=9   {reset, did=1}
0001___01___010101_1_1001___000000001

# Deassert reset GW Routers and set did
#SEND  en   id=19  d l=9   {reset, did=1}
0001___10___010011_1_1001___000000001
#SEND  en   id=20  d l=9   {reset, did=0}
0001___10___010100_1_1001___000000000
#SEND  en   id=21  d l=9   {reset, did=0}
0001___10___010101_1_1001___000000000

################################################################################
#
# Done!
#
# Configuration is complete and we are out of reset. We should indicate we are
# done to allow the next part of the testbench to come alive.

# Assert done_o
0011___0000000000000000000000
